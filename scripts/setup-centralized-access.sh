#!/bin/bash

# DAP Centralized Access Setup Script
# Run this on the jump host / public machine

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}DAP Centralized Access Setup${NC}"
echo -e "${GREEN}========================================${NC}"
echo ""

# Check if running as root or sudo
if [ "$EUID" -ne 0 ]; then 
   echo -e "${RED}Please run as root or with sudo${NC}"
   exit 1
fi

# Get configuration
echo -e "${YELLOW}Configuration:${NC}"
read -p "DAP Server IP [172.22.156.32]: " DAP_SERVER_IP
DAP_SERVER_IP=${DAP_SERVER_IP:-172.22.156.32}

read -p "Public Port for Users [8080]: " PUBLIC_PORT
PUBLIC_PORT=${PUBLIC_PORT:-8080}

read -p "Setup Method (1=SSH Tunnel, 2=nginx): " SETUP_METHOD

echo ""
echo -e "${GREEN}Using Configuration:${NC}"
echo "  DAP Server: $DAP_SERVER_IP"
echo "  Public Port: $PUBLIC_PORT"
echo ""

if [ "$SETUP_METHOD" == "1" ]; then
    echo -e "${GREEN}=== Setting up SSH Tunnel ===${NC}"
    
    read -p "SSH Username for DAP server: " SSH_USER
    read -p "Create systemd service? (y/n) [y]: " CREATE_SERVICE
    CREATE_SERVICE=${CREATE_SERVICE:-y}
    
    echo ""
    echo "Testing SSH connection..."
    if ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no ${SSH_USER}@${DAP_SERVER_IP} "echo 'SSH connection successful'"; then
        echo -e "${GREEN}✓ SSH connection works${NC}"
    else
        echo -e "${RED}✗ Cannot connect via SSH. Please check:${NC}"
        echo "  1. SSH access to $DAP_SERVER_IP"
        echo "  2. SSH key authentication is set up"
        exit 1
    fi
    
    # Open firewall
    echo ""
    echo "Opening firewall port $PUBLIC_PORT..."
    if command -v firewall-cmd &> /dev/null; then
        firewall-cmd --permanent --add-port=${PUBLIC_PORT}/tcp
        firewall-cmd --reload
        echo -e "${GREEN}✓ Firewall configured (firewalld)${NC}"
    elif command -v ufw &> /dev/null; then
        ufw allow ${PUBLIC_PORT}/tcp
        echo -e "${GREEN}✓ Firewall configured (ufw)${NC}"
    else
        echo -e "${YELLOW}! Please manually configure firewall for port ${PUBLIC_PORT}${NC}"
    fi
    
    if [ "$CREATE_SERVICE" == "y" ]; then
        echo ""
        echo "Creating systemd service..."
        
        cat > /etc/systemd/system/dap-tunnel.service <<EOF
[Unit]
Description=DAP Application SSH Tunnel
After=network.target

[Service]
Type=simple
User=${SSH_USER}
Restart=always
RestartSec=10
ExecStart=/usr/bin/ssh -g -N -o ServerAliveInterval=60 -o ServerAliveCountMax=3 -o StrictHostKeyChecking=no -L 0.0.0.0:${PUBLIC_PORT}:${DAP_SERVER_IP}:5173 -L 0.0.0.0:$((PUBLIC_PORT+1)):${DAP_SERVER_IP}:4000 ${SSH_USER}@${DAP_SERVER_IP}

[Install]
WantedBy=multi-user.target
EOF
        
        systemctl daemon-reload
        systemctl enable dap-tunnel
        systemctl start dap-tunnel
        
        echo -e "${GREEN}✓ Systemd service created and started${NC}"
        echo ""
        systemctl status dap-tunnel --no-pager
    else
        echo ""
        echo -e "${YELLOW}Manual SSH tunnel command:${NC}"
        echo "ssh -g -N -L 0.0.0.0:${PUBLIC_PORT}:${DAP_SERVER_IP}:5173 -L 0.0.0.0:$((PUBLIC_PORT+1)):${DAP_SERVER_IP}:4000 ${SSH_USER}@${DAP_SERVER_IP} &"
    fi
    
    echo ""
    echo -e "${GREEN}=== Setup Complete ===${NC}"
    echo ""
    echo "Users can access the application at:"
    echo -e "${GREEN}  http://$(hostname -I | awk '{print $1}'):${PUBLIC_PORT}${NC}"
    echo ""
    echo "Note: Frontend uses port $PUBLIC_PORT, backend uses port $((PUBLIC_PORT+1))"
    
elif [ "$SETUP_METHOD" == "2" ]; then
    echo -e "${GREEN}=== Setting up nginx Reverse Proxy ===${NC}"
    
    # Install nginx
    echo ""
    echo "Installing nginx..."
    if command -v yum &> /dev/null; then
        yum install -y nginx
    elif command -v apt &> /dev/null; then
        apt update && apt install -y nginx
    else
        echo -e "${RED}Cannot install nginx automatically. Please install manually.${NC}"
        exit 1
    fi
    echo -e "${GREEN}✓ nginx installed${NC}"
    
    # Create config
    echo ""
    echo "Creating nginx configuration..."
    cat > /etc/nginx/conf.d/dap.conf <<EOF
# DAP Application Reverse Proxy
# Auto-generated by setup script

server {
    listen ${PUBLIC_PORT};
    server_name _;

    # Frontend
    location / {
        proxy_pass http://${DAP_SERVER_IP}:5173;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_cache_bypass \$http_upgrade;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    # Backend GraphQL
    location /graphql {
        proxy_pass http://${DAP_SERVER_IP}:4000/graphql;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_cache_bypass \$http_upgrade;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
    
    # Backend Health
    location /health {
        proxy_pass http://${DAP_SERVER_IP}:4000/health;
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
    }
}
EOF
    
    echo -e "${GREEN}✓ nginx configuration created${NC}"
    
    # Test configuration
    echo ""
    echo "Testing nginx configuration..."
    if nginx -t; then
        echo -e "${GREEN}✓ nginx configuration is valid${NC}"
    else
        echo -e "${RED}✗ nginx configuration has errors${NC}"
        exit 1
    fi
    
    # Open firewall
    echo ""
    echo "Opening firewall port $PUBLIC_PORT..."
    if command -v firewall-cmd &> /dev/null; then
        firewall-cmd --permanent --add-port=${PUBLIC_PORT}/tcp
        firewall-cmd --permanent --add-service=http
        firewall-cmd --reload
        echo -e "${GREEN}✓ Firewall configured (firewalld)${NC}"
    elif command -v ufw &> /dev/null; then
        ufw allow ${PUBLIC_PORT}/tcp
        echo -e "${GREEN}✓ Firewall configured (ufw)${NC}"
    else
        echo -e "${YELLOW}! Please manually configure firewall for port ${PUBLIC_PORT}${NC}"
    fi
    
    # Start nginx
    echo ""
    echo "Starting nginx..."
    systemctl enable nginx
    systemctl restart nginx
    echo -e "${GREEN}✓ nginx started${NC}"
    
    echo ""
    echo -e "${GREEN}=== Setup Complete ===${NC}"
    echo ""
    echo "Users can access the application at:"
    echo -e "${GREEN}  http://$(hostname -I | awk '{print $1}'):${PUBLIC_PORT}${NC}"
    echo ""
    echo "Management commands:"
    echo "  sudo systemctl status nginx"
    echo "  sudo systemctl restart nginx"
    echo "  sudo tail -f /var/log/nginx/access.log"
    echo "  sudo tail -f /var/log/nginx/error.log"
    
else
    echo -e "${RED}Invalid setup method. Choose 1 or 2.${NC}"
    exit 1
fi

echo ""
echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}Testing Setup...${NC}"
echo -e "${GREEN}========================================${NC}"
echo ""

sleep 2

# Test health endpoint
JUMP_HOST_IP=$(hostname -I | awk '{print $1}')
echo "Testing backend health endpoint..."
if curl -s http://${JUMP_HOST_IP}:${PUBLIC_PORT}/health > /dev/null; then
    echo -e "${GREEN}✓ Backend health check successful${NC}"
else
    echo -e "${YELLOW}! Backend health check failed. This might be normal if backend is not responding yet.${NC}"
fi

echo ""
echo "Testing frontend..."
if curl -s http://${JUMP_HOST_IP}:${PUBLIC_PORT} > /dev/null; then
    echo -e "${GREEN}✓ Frontend accessible${NC}"
else
    echo -e "${YELLOW}! Frontend not accessible yet. Check if DAP server is running.${NC}"
fi

echo ""
echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}Setup Summary${NC}"
echo -e "${GREEN}========================================${NC}"
echo ""
echo "Application URL: http://${JUMP_HOST_IP}:${PUBLIC_PORT}"
echo "DAP Server: ${DAP_SERVER_IP}"
echo "Setup Method: $([ "$SETUP_METHOD" == "1" ] && echo "SSH Tunnel" || echo "nginx Reverse Proxy")"
echo ""
echo "Share this URL with your users:"
echo -e "${GREEN}http://${JUMP_HOST_IP}:${PUBLIC_PORT}${NC}"
echo ""
echo "Documentation: See CENTRALIZED_ACCESS_SETUP.md for details"
echo ""

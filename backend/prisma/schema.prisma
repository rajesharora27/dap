generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x", "native", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id         String      @id @default(cuid())
  email      String      @unique
  username   String?     @unique
  name       String?
  role       Role        @default(USER)
  password   String
  auditLogs  AuditLog[]
  changeSets ChangeSet[]
  sessions   Session[]
}

model Session {
  id             String         @id @default(cuid())
  userId         String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  expiresAt      DateTime
  lockedEntities LockedEntity[]
  user           User           @relation(fields: [userId], references: [id])
}

model LockedEntity {
  id         String   @id @default(cuid())
  entityType String
  entityId   String
  sessionId  String
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  session    Session  @relation(fields: [sessionId], references: [id])

  @@index([entityType, entityId])
}

model Product {
  id          String            @id @default(cuid())
  name        String
  description String?
  customAttrs Json?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  deletedAt   DateTime?
  customers   CustomerProduct[]
  licenses    License[]
  solutions   SolutionProduct[]
  tasks       Task[]
  outcomes    Outcome[]
  releases    Release[]
}

model Solution {
  id          String             @id @default(cuid())
  name        String
  description String?
  customAttrs Json?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  deletedAt   DateTime?
  customers   CustomerSolution[]
  licenses    License[]
  products    SolutionProduct[]
  tasks       Task[]
  releases    Release[]
}

model SolutionProduct {
  id         String   @id @default(cuid())
  productId  String
  solutionId String
  order      Int      @default(0)
  product    Product  @relation(fields: [productId], references: [id])
  solution   Solution @relation(fields: [solutionId], references: [id])

  @@unique([productId, solutionId])
}

model Customer {
  id          String             @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  deletedAt   DateTime?
  products    CustomerProduct[]
  solutions   CustomerSolution[]
}

model CustomerProduct {
  id         String   @id @default(cuid())
  customerId String
  productId  String
  customer   Customer @relation(fields: [customerId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@unique([customerId, productId])
}

model CustomerSolution {
  id         String   @id @default(cuid())
  customerId String
  solutionId String
  customer   Customer @relation(fields: [customerId], references: [id])
  solution   Solution @relation(fields: [solutionId], references: [id])

  @@unique([customerId, solutionId])
}

model Task {
  id                  String           @id @default(cuid())
  productId           String?
  solutionId          String?
  name                String
  description         String?
  estMinutes          Int
  notes               String?
  weight              Float            @default(0)
  sequenceNumber      Int
  licenseLevel        LicenseLevel     @default(ESSENTIAL)
  priority            String?          // Priority level (Low, Medium, High, Critical)
  howToDoc            String?          // HTTP link explaining how to implement the task
  howToVideo          String?          // Link to video explaining how to implement the task
  rawTelemetryMapping String?
  completedAt         DateTime?
  completedReason     String?
  softDeleteQueued    Boolean          @default(false)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  deletedAt           DateTime?
  product             Product?         @relation(fields: [productId], references: [id])
  solution            Solution?        @relation(fields: [solutionId], references: [id])
  telemetry           Telemetry[]
  outcomes            TaskOutcome[]
  releases            TaskRelease[]

  @@unique([productId, sequenceNumber], name: "unique_product_sequence")
  @@unique([solutionId, sequenceNumber], name: "unique_solution_sequence")
  @@index([productId, sequenceNumber])
  @@index([solutionId, sequenceNumber])
}



model License {
  id          String    @id @default(cuid())
  name        String
  description String?
  level       Int       @default(1)      // Hierarchical level (1=lowest, higher numbers include lower levels)
  isActive    Boolean   @default(true)   // Whether this license is currently active
  productId   String?
  solutionId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  product     Product?  @relation(fields: [productId], references: [id])
  solution    Solution? @relation(fields: [solutionId], references: [id])
}

model Telemetry {
  id        String   @id @default(cuid())
  taskId    String
  data      Json
  createdAt DateTime @default(now())
  expiresAt DateTime @default(dbgenerated("(now() + '30 days'::interval)"))
  task      Task     @relation(fields: [taskId], references: [id])

  @@index([taskId])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  entity    String?
  entityId  String?
  details   Json?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model ChangeSet {
  id          String       @id @default(cuid())
  userId      String?
  createdAt   DateTime     @default(now())
  committedAt DateTime?
  items       ChangeItem[]
  user        User?        @relation(fields: [userId], references: [id])
}

model ChangeItem {
  id          String    @id @default(cuid())
  changeSetId String
  entityType  String
  entityId    String
  before      Json?
  after       Json?
  createdAt   DateTime  @default(now())
  changeSet   ChangeSet @relation(fields: [changeSetId], references: [id])
}

enum Role {
  ADMIN
  USER
}

enum LicenseLevel {
  ESSENTIAL
  ADVANTAGE
  SIGNATURE
}

model Outcome {
  id          String        @id @default(cuid())
  productId   String
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  product     Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  tasks       TaskOutcome[]

  @@unique([productId, name])
}

model TaskOutcome {
  id        String  @id @default(cuid())
  taskId    String
  outcomeId String
  task      Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  outcome   Outcome @relation(fields: [outcomeId], references: [id], onDelete: Cascade)

  @@unique([taskId, outcomeId])
}

model Release {
  id          String        @id @default(cuid())
  name        String
  description String?
  level       Float         @default(1.0)    // Decimal level (1.0, 1.1, 2.0, etc.)
  isActive    Boolean       @default(true)   // Whether this release is currently active
  productId   String?
  solutionId  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  product     Product?      @relation(fields: [productId], references: [id])
  solution    Solution?     @relation(fields: [solutionId], references: [id])
  tasks       TaskRelease[]

  @@unique([productId, level], name: "unique_product_release_level")
  @@unique([solutionId, level], name: "unique_solution_release_level")
}

model TaskRelease {
  id        String  @id @default(cuid())
  taskId    String
  releaseId String
  task      Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  release   Release @relation(fields: [releaseId], references: [id], onDelete: Cascade)

  @@unique([taskId, releaseId])
}

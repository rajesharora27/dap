generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x", "native", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id         String      @id @default(cuid())
  email      String      @unique
  username   String?     @unique
  name       String?
  role       Role        @default(USER)
  password   String
  auditLogs  AuditLog[]
  changeSets ChangeSet[]
  sessions   Session[]
}

model Session {
  id             String         @id @default(cuid())
  userId         String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  expiresAt      DateTime
  lockedEntities LockedEntity[]
  user           User           @relation(fields: [userId], references: [id])
}

model LockedEntity {
  id         String   @id @default(cuid())
  entityType String
  entityId   String
  sessionId  String
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  session    Session  @relation(fields: [sessionId], references: [id])

  @@index([entityType, entityId])
}

model Product {
  id               String            @id @default(cuid())
  name             String            @unique
  description      String?
  customAttrs      Json?             // Legacy - will be replaced by CustomAttribute model
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  deletedAt        DateTime?
  customers        CustomerProduct[]
  licenses         License[]
  solutions        SolutionProduct[]
  tasks            Task[]
  outcomes         Outcome[]
  releases         Release[]
  customAttributes CustomAttribute[] // New structured custom attributes
}

model Solution {
  id          String             @id @default(cuid())
  name        String
  description String?
  customAttrs Json?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  deletedAt   DateTime?
  customers   CustomerSolution[]
  licenses    License[]
  products    SolutionProduct[]
  tasks       Task[]
  releases    Release[]
}

model SolutionProduct {
  id         String   @id @default(cuid())
  productId  String
  solutionId String
  order      Int      @default(0)
  product    Product  @relation(fields: [productId], references: [id])
  solution   Solution @relation(fields: [solutionId], references: [id])

  @@unique([productId, solutionId])
}

model Customer {
  id          String             @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  deletedAt   DateTime?
  products    CustomerProduct[]
  solutions   CustomerSolution[]
}

model CustomerProduct {
  id                String              @id @default(cuid())
  customerId        String
  productId         String
  
  // License and Outcomes Selection
  licenseLevel      LicenseLevel        @default(ESSENTIAL)
  selectedOutcomes  Json?               // Array of outcome IDs customer selected
  selectedReleases  Json?               // Array of release IDs customer selected
  
  // Metadata
  purchasedAt       DateTime            @default(now())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  // Relations
  customer          Customer            @relation(fields: [customerId], references: [id], onDelete: Cascade)
  product           Product             @relation(fields: [productId], references: [id], onDelete: Cascade)
  adoptionPlan      AdoptionPlan?       // One adoption plan per product
  
  @@unique([customerId, productId])
  @@index([customerId])
  @@index([productId])
}

model CustomerSolution {
  id         String   @id @default(cuid())
  customerId String
  solutionId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  solution   Solution @relation(fields: [solutionId], references: [id], onDelete: Cascade)

  @@unique([customerId, solutionId])
  @@index([customerId])
  @@index([solutionId])
}

model AdoptionPlan {
  id                  String              @id @default(cuid())
  customerProductId   String              @unique
  
  // Snapshot of product details at time of creation
  productId           String              // Reference to original product
  productName         String              // Snapshot of product name
  licenseLevel        LicenseLevel        // License level when created
  selectedOutcomes    Json?               // Outcome IDs when created
  selectedReleases    Json?               // Release IDs when created
  
  // Progress tracking
  totalTasks          Int                 @default(0)
  completedTasks      Int                 @default(0)
  totalWeight         Decimal             @default(0) @db.Decimal(10, 2)
  completedWeight     Decimal             @default(0) @db.Decimal(10, 2)
  progressPercentage  Decimal             @default(0) @db.Decimal(5, 2)
  
  // Metadata
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  lastSyncedAt        DateTime?           // Last time synced with product changes
  
  // Relations
  customerProduct     CustomerProduct     @relation(fields: [customerProductId], references: [id], onDelete: Cascade)
  tasks               CustomerTask[]
  
  @@index([customerProductId])
  @@index([productId])
}

model CustomerTask {
  id                    String                    @id @default(cuid())
  adoptionPlanId        String
  
  // Snapshot of original task
  originalTaskId        String                    // Reference to product task
  name                  String
  description           String?
  estMinutes            Int
  weight                Decimal                   @db.Decimal(5, 2)
  sequenceNumber        Int
  priority              String?
  howToDoc              String[]
  howToVideo            String[]
  notes                 String?
  licenseLevel          LicenseLevel
  
  // Customer-specific status
  status                CustomerTaskStatus        @default(NOT_STARTED)
  statusUpdatedAt       DateTime?
  statusUpdatedBy       String?                   // User ID or "telemetry"
  statusUpdateSource    StatusUpdateSource?       // How the status was updated (MANUAL, TELEMETRY, IMPORT, SYSTEM)
  statusNotes           String?                   // Why status changed
  
  // Completion tracking
  isComplete            Boolean                   @default(false)
  completedAt           DateTime?
  completedBy           String?                   // User ID or "telemetry"
  
  // Metadata
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  
  // Relations
  adoptionPlan          AdoptionPlan              @relation(fields: [adoptionPlanId], references: [id], onDelete: Cascade)
  telemetryAttributes   CustomerTelemetryAttribute[]
  outcomes              CustomerTaskOutcome[]
  releases              CustomerTaskRelease[]
  
  @@index([adoptionPlanId])
  @@index([originalTaskId])
  @@index([status])
}

model CustomerTelemetryAttribute {
  id                String                      @id @default(cuid())
  customerTaskId    String
  
  // Snapshot of original telemetry attribute
  originalAttributeId String?                   // Reference to product telemetry attribute
  name              String
  description       String?
  dataType          TelemetryDataType
  isRequired        Boolean                     @default(false)
  successCriteria   Json                        // Same structure as TelemetryAttribute
  order             Int                         @default(0)
  
  // Customer-specific tracking
  isActive          Boolean                     @default(true)
  isMet             Boolean                     @default(false)
  lastCheckedAt     DateTime?
  
  // Metadata
  createdAt         DateTime                    @default(now())
  updatedAt         DateTime                    @updatedAt
  
  // Relations
  customerTask      CustomerTask                @relation(fields: [customerTaskId], references: [id], onDelete: Cascade)
  values            CustomerTelemetryValue[]
  
  @@unique([customerTaskId, name])
  @@index([customerTaskId])
}

model CustomerTelemetryValue {
  id                        String                     @id @default(cuid())
  customerAttributeId       String
  
  // Value details
  value                     Json
  source                    String?                    // "manual", "api", "customer_system"
  batchId                   String?
  notes                     String?
  
  // Metadata
  createdAt                 DateTime                   @default(now())
  
  // Relations
  customerAttribute         CustomerTelemetryAttribute @relation(fields: [customerAttributeId], references: [id], onDelete: Cascade)
  
  @@index([customerAttributeId])
  @@index([batchId])
  @@index([createdAt])
}

model CustomerTaskOutcome {
  id              String        @id @default(cuid())
  customerTaskId  String
  outcomeId       String
  customerTask    CustomerTask  @relation(fields: [customerTaskId], references: [id], onDelete: Cascade)
  outcome         Outcome       @relation(fields: [outcomeId], references: [id], onDelete: Cascade)
  
  @@unique([customerTaskId, outcomeId])
  @@index([customerTaskId])
  @@index([outcomeId])
}

model CustomerTaskRelease {
  id              String        @id @default(cuid())
  customerTaskId  String
  releaseId       String
  customerTask    CustomerTask  @relation(fields: [customerTaskId], references: [id], onDelete: Cascade)
  release         Release       @relation(fields: [releaseId], references: [id], onDelete: Cascade)
  
  @@unique([customerTaskId, releaseId])
  @@index([customerTaskId])
  @@index([releaseId])
}

model Task {
  id                  String           @id @default(cuid())
  productId           String?
  solutionId          String?
  name                String
  description         String?
  estMinutes          Int
  notes               String?
  weight              Decimal          @default(0) @db.Decimal(5, 2)
  sequenceNumber      Int
  licenseLevel        LicenseLevel     @default(ESSENTIAL)
  priority            String?          // Priority level (Low, Medium, High, Critical)
  howToDoc            String[]         // HTTP links explaining how to implement the task
  howToVideo          String[]         // Links to videos explaining how to implement the task
  rawTelemetryMapping String?
  completedAt         DateTime?
  completedReason     String?
  softDeleteQueued    Boolean          @default(false)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  deletedAt           DateTime?
  product             Product?              @relation(fields: [productId], references: [id])
  solution            Solution?             @relation(fields: [solutionId], references: [id])
  telemetry           Telemetry[]
  telemetryAttributes TelemetryAttribute[]
  outcomes            TaskOutcome[]
  releases            TaskRelease[]

  @@unique([productId, sequenceNumber], name: "unique_product_sequence")
  @@unique([solutionId, sequenceNumber], name: "unique_solution_sequence")
  @@index([productId, sequenceNumber])
  @@index([solutionId, sequenceNumber])
}



model License {
  id          String    @id @default(cuid())
  name        String
  description String?
  level       Int       @default(1)      // Hierarchical level (1=lowest, higher numbers include lower levels)
  isActive    Boolean   @default(true)   // Whether this license is currently active
  productId   String?
  solutionId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  product     Product?  @relation(fields: [productId], references: [id])
  solution    Solution? @relation(fields: [solutionId], references: [id])
}

model Telemetry {
  id        String   @id @default(cuid())
  taskId    String
  data      Json
  createdAt DateTime @default(now())
  expiresAt DateTime @default(dbgenerated("(now() + '30 days'::interval)"))
  task      Task     @relation(fields: [taskId], references: [id])

  @@index([taskId])
}

model TelemetryAttribute {
  id              String                @id @default(cuid())
  taskId          String
  name            String                // e.g., "login_enabled", "user_count", "location"
  description     String?
  dataType        TelemetryDataType     @default(STRING)
  isRequired      Boolean               @default(false)   // Whether this attribute is mandatory for task completion
  successCriteria Json                  // Flexible criteria definition supporting AND/OR logic
  order           Int                   @default(0)       // Display order in UI
  isActive        Boolean               @default(true)    // Whether this attribute is currently being tracked
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  task            Task                  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  values          TelemetryValue[]

  @@unique([taskId, name])
  @@index([taskId])
}

model TelemetryValue {
  id          String             @id @default(cuid())
  attributeId String
  value       Json               // Actual data value (boolean, number, string, etc.)
  source      String?            // Source of data: "manual", "api", "database", "external_system"
  batchId     String?            // For grouping daily batch updates
  notes       String?            // Optional notes about this value
  createdAt   DateTime           @default(now())
  attribute   TelemetryAttribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)

  @@index([attributeId])
  @@index([batchId])
  @@index([createdAt])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  entity    String?
  entityId  String?
  details   Json?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model ChangeSet {
  id          String       @id @default(cuid())
  userId      String?
  createdAt   DateTime     @default(now())
  committedAt DateTime?
  items       ChangeItem[]
  user        User?        @relation(fields: [userId], references: [id])
}

model ChangeItem {
  id          String    @id @default(cuid())
  changeSetId String
  entityType  String
  entityId    String
  before      Json?
  after       Json?
  createdAt   DateTime  @default(now())
  changeSet   ChangeSet @relation(fields: [changeSetId], references: [id])
}

enum Role {
  ADMIN
  USER
}

enum LicenseLevel {
  ESSENTIAL
  ADVANTAGE
  SIGNATURE
}

enum TelemetryDataType {
  BOOLEAN
  NUMBER
  STRING
  TIMESTAMP
  JSON
}

enum CustomAttributeDataType {
  TEXT
  NUMBER
  DATE
  BOOLEAN
  JSON
}

enum CustomerTaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  DONE
  NOT_APPLICABLE
}

enum StatusUpdateSource {
  MANUAL      // Updated via GUI by user
  TELEMETRY   // Automatically updated via telemetry evaluation
  IMPORT      // Updated via CSV import
  SYSTEM      // Updated by system (e.g., adoption plan creation)
}

model CustomAttribute {
  id             String                  @id @default(cuid())
  productId      String
  product        Product                 @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  attributeName  String                  @db.VarChar(255)
  attributeValue String?                 @db.Text
  dataType       CustomAttributeDataType @default(TEXT)
  description    String?                 @db.VarChar(500)
  isRequired     Boolean                 @default(false)
  displayOrder   Int?
  
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  
  @@unique([productId, attributeName])
  @@unique([productId, displayOrder])
  @@index([productId])
}

model Outcome {
  id            String                @id @default(cuid())
  productId     String
  name          String
  description   String?
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  product       Product               @relation(fields: [productId], references: [id], onDelete: Cascade)
  tasks         TaskOutcome[]
  customerTasks CustomerTaskOutcome[]

  @@unique([productId, name])
}

model TaskOutcome {
  id        String  @id @default(cuid())
  taskId    String
  outcomeId String
  task      Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  outcome   Outcome @relation(fields: [outcomeId], references: [id], onDelete: Cascade)

  @@unique([taskId, outcomeId])
}

model Release {
  id            String                @id @default(cuid())
  name          String
  description   String?
  level         Float                 @default(1.0)    // Decimal level (1.0, 1.1, 2.0, etc.)
  isActive      Boolean               @default(true)   // Whether this release is currently active
  productId     String?
  solutionId    String?
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  deletedAt     DateTime?
  product       Product?              @relation(fields: [productId], references: [id])
  solution      Solution?             @relation(fields: [solutionId], references: [id])
  tasks         TaskRelease[]
  customerTasks CustomerTaskRelease[]

  @@unique([productId, level], name: "unique_product_release_level")
  @@unique([solutionId, level], name: "unique_solution_release_level")
}

model TaskRelease {
  id        String  @id @default(cuid())
  taskId    String
  releaseId String
  task      Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  release   Release @relation(fields: [releaseId], references: [id], onDelete: Cascade)

  @@unique([taskId, releaseId])
}

"use strict";
/**
 * Telemetry GraphQL Resolvers
 *
 * This module contains all GraphQL resolvers for telemetry-related operations.
 * It uses the TelemetryService for business logic and provides clean error handling.
 *
 * Features:
 * - Type-safe resolvers with comprehensive error handling
 * - Integration with audit logging and user authentication
 * - Optimized queries with proper includes and ordering
 * - Batch operations support
 *
 * @author Generated by GitHub Copilot
 * @version 1.0.0
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskTelemetryResolvers = exports.TelemetryMutationResolvers = exports.TelemetryQueryResolvers = exports.TelemetryValueResolvers = exports.TelemetryAttributeResolvers = void 0;
const context_1 = require("../../../context");
const auth_1 = require("../../../lib/auth");
const telemetry_1 = require("../../../services/telemetry");
/**
 * Telemetry Attribute type resolvers
 */
exports.TelemetryAttributeResolvers = {
    task: async (parent) => {
        if (context_1.fallbackActive) {
            return null;
        }
        try {
            const { prisma } = await Promise.resolve().then(() => __importStar(require('../../../context')));
            return await prisma.task.findUnique({ where: { id: parent.taskId } });
        }
        catch (error) {
            console.error('Error resolving telemetry attribute task:', error);
            return null;
        }
    },
    values: async (parent, { limit = 50 }) => {
        if (context_1.fallbackActive) {
            return [];
        }
        try {
            return await telemetry_1.TelemetryService.getValuesForAttribute(parent.id, Math.min(limit, 200));
        }
        catch (error) {
            console.error('Error resolving telemetry attribute values:', error);
            return [];
        }
    },
    currentValue: async (parent) => {
        if (context_1.fallbackActive) {
            return null;
        }
        try {
            const values = await telemetry_1.TelemetryService.getValuesForAttribute(parent.id, 1);
            return values.length > 0 ? values[0] : null;
        }
        catch (error) {
            console.error('Error resolving telemetry attribute current value:', error);
            return null;
        }
    },
    isSuccessful: async (parent) => {
        if (context_1.fallbackActive) {
            return false;
        }
        try {
            const { evaluateTelemetryAttribute } = await Promise.resolve().then(() => __importStar(require('../../../services/telemetry')));
            const result = await evaluateTelemetryAttribute(parent);
            return result.success;
        }
        catch (error) {
            console.error('Error evaluating telemetry attribute success:', error);
            return false;
        }
    }
};
/**
 * Telemetry Value type resolvers
 */
exports.TelemetryValueResolvers = {
    attribute: async (parent) => {
        if (context_1.fallbackActive) {
            return null;
        }
        try {
            return await telemetry_1.TelemetryService.getAttributeById(parent.attributeId, false);
        }
        catch (error) {
            console.error('Error resolving telemetry value attribute:', error);
            return null;
        }
    }
};
/**
 * Telemetry Query resolvers
 */
exports.TelemetryQueryResolvers = {
    telemetryAttribute: async (_, { id }) => {
        if (context_1.fallbackActive) {
            return null;
        }
        try {
            return await telemetry_1.TelemetryService.getAttributeById(id, true);
        }
        catch (error) {
            console.error('Error fetching telemetry attribute:', error);
            return null;
        }
    },
    telemetryAttributes: async (_, { taskId }) => {
        if (context_1.fallbackActive) {
            return [];
        }
        try {
            return await telemetry_1.TelemetryService.getAttributesForTask(taskId, true);
        }
        catch (error) {
            console.error('Error fetching telemetry attributes:', error);
            return [];
        }
    },
    telemetryValue: async (_, { id }) => {
        if (context_1.fallbackActive) {
            return null;
        }
        try {
            const { prisma } = await Promise.resolve().then(() => __importStar(require('../../../context')));
            return await prisma.telemetryValue.findUnique({
                where: { id },
                include: { attribute: true }
            });
        }
        catch (error) {
            console.error('Error fetching telemetry value:', error);
            return null;
        }
    },
    telemetryValues: async (_, { attributeId, limit = 50 }) => {
        if (context_1.fallbackActive) {
            return [];
        }
        try {
            return await telemetry_1.TelemetryService.getValuesForAttribute(attributeId, limit);
        }
        catch (error) {
            console.error('Error fetching telemetry values:', error);
            return [];
        }
    },
    telemetryValuesByBatch: async (_, { batchId }) => {
        if (context_1.fallbackActive) {
            return [];
        }
        try {
            const { prisma } = await Promise.resolve().then(() => __importStar(require('../../../context')));
            return await prisma.telemetryValue.findMany({
                where: { batchId },
                orderBy: { createdAt: 'desc' },
                include: { attribute: true }
            });
        }
        catch (error) {
            console.error('Error fetching telemetry values by batch:', error);
            return [];
        }
    }
};
/**
 * Telemetry Mutation resolvers
 */
exports.TelemetryMutationResolvers = {
    createTelemetryAttribute: async (_, { input }, ctx) => {
        (0, auth_1.requireUser)(ctx);
        try {
            return await telemetry_1.TelemetryService.createAttribute(input.taskId, {
                name: input.name,
                description: input.description,
                dataType: input.dataType,
                successCriteria: input.successCriteria ? JSON.parse(input.successCriteria) : undefined,
                order: input.order,
                isRequired: input.isRequired
            }, ctx.user?.id);
        }
        catch (error) {
            console.error('Error creating telemetry attribute:', error);
            throw new Error(`Failed to create telemetry attribute: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
    },
    updateTelemetryAttribute: async (_, { id, input }, ctx) => {
        (0, auth_1.requireUser)(ctx);
        try {
            return await telemetry_1.TelemetryService.updateAttribute(id, {
                name: input.name,
                description: input.description,
                dataType: input.dataType,
                successCriteria: input.successCriteria ? JSON.parse(input.successCriteria) : undefined,
                order: input.order,
                isRequired: input.isRequired
            }, ctx.user?.id);
        }
        catch (error) {
            console.error('Error updating telemetry attribute:', error);
            throw new Error(`Failed to update telemetry attribute: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
    },
    deleteTelemetryAttribute: async (_, { id }, ctx) => {
        (0, auth_1.requireUser)(ctx);
        try {
            const success = await telemetry_1.TelemetryService.deleteAttribute(id, ctx.user?.id);
            return success;
        }
        catch (error) {
            console.error('Error deleting telemetry attribute:', error);
            throw new Error(`Failed to delete telemetry attribute: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
    },
    addTelemetryValue: async (_, { input }, ctx) => {
        (0, auth_1.requireUser)(ctx);
        try {
            return await telemetry_1.TelemetryService.addValue(input.attributeId, {
                value: input.value,
                notes: input.notes,
                batchId: input.batchId
            }, ctx.user?.id);
        }
        catch (error) {
            console.error('Error adding telemetry value:', error);
            throw new Error(`Failed to add telemetry value: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
    },
    addBatchTelemetryValues: async (_, { input }, ctx) => {
        (0, auth_1.requireUser)(ctx);
        try {
            return await telemetry_1.TelemetryService.addBatchValues(input, ctx.user?.id);
        }
        catch (error) {
            console.error('Error adding batch telemetry values:', error);
            throw new Error(`Failed to add batch telemetry values: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
    },
    updateTelemetryValue: async (_, { id, value, notes }, ctx) => {
        (0, auth_1.requireUser)(ctx);
        try {
            return await telemetry_1.TelemetryService.updateValue(id, { value, notes }, ctx.user?.id);
        }
        catch (error) {
            console.error('Error updating telemetry value:', error);
            throw new Error(`Failed to update telemetry value: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
    },
    deleteTelemetryValue: async (_, { id }, ctx) => {
        (0, auth_1.requireUser)(ctx);
        try {
            const success = await telemetry_1.TelemetryService.deleteValue(id, ctx.user?.id);
            return success;
        }
        catch (error) {
            console.error('Error deleting telemetry value:', error);
            throw new Error(`Failed to delete telemetry value: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
    }
};
/**
 * Task resolver extensions for telemetry
 */
exports.TaskTelemetryResolvers = {
    telemetryAttributes: async (parent) => {
        if (context_1.fallbackActive) {
            return [];
        }
        try {
            return await telemetry_1.TelemetryService.getAttributesForTask(parent.id, true);
        }
        catch (error) {
            console.error('Error resolving task telemetry attributes:', error);
            return [];
        }
    },
    isCompleteBasedOnTelemetry: async (parent) => {
        if (context_1.fallbackActive) {
            return false;
        }
        try {
            const summary = await telemetry_1.TelemetryService.getTaskCompletionSummary(parent.id);
            return summary.isComplete;
        }
        catch (error) {
            console.error('Error resolving task telemetry completion:', error);
            return false;
        }
    },
    telemetryCompletionPercentage: async (parent) => {
        if (context_1.fallbackActive) {
            return 0;
        }
        try {
            const summary = await telemetry_1.TelemetryService.getTaskCompletionSummary(parent.id);
            return summary.completionPercentage;
        }
        catch (error) {
            console.error('Error resolving task telemetry completion percentage:', error);
            return 0;
        }
    }
};

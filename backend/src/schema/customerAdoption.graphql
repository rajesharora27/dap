# Customer Adoption GraphQL Schema

# Enums
enum CustomerTaskStatus {
  NOT_STARTED
  IN_PROGRESS
  DONE
  NOT_APPLICABLE
}

# Types
type CustomerProductWithPlan {
  id: ID!
  customer: Customer!
  product: Product!
  licenseLevel: LicenseLevel!
  selectedOutcomes: [Outcome!]!
  adoptionPlan: AdoptionPlan
  purchasedAt: String!
  createdAt: String!
  updatedAt: String!
}

type AdoptionPlan {
  id: ID!
  customerProduct: CustomerProductWithPlan!
  productId: ID!
  productName: String!
  licenseLevel: LicenseLevel!
  selectedOutcomes: [Outcome!]!
  
  # Progress tracking
  totalTasks: Int!
  completedTasks: Int!
  totalWeight: Float!
  completedWeight: Float!
  progressPercentage: Float!
  
  # Tasks
  tasks: [CustomerTask!]!
  tasksByStatus(status: CustomerTaskStatus): [CustomerTask!]!
  
  # Metadata
  createdAt: String!
  updatedAt: String!
  lastSyncedAt: String
  needsSync: Boolean! # Computed: product updated after lastSyncedAt
}

type CustomerTask {
  id: ID!
  adoptionPlan: AdoptionPlan!
  originalTaskId: ID!
  
  # Task details (snapshot)
  name: String!
  description: String
  estMinutes: Int!
  weight: Float!
  sequenceNumber: Int!
  priority: String
  howToDoc: [String!]!
  howToVideo: [String!]!
  notes: String
  licenseLevel: LicenseLevel!
  
  # Customer-specific status
  status: CustomerTaskStatus!
  statusUpdatedAt: String
  statusUpdatedBy: String # User ID or "telemetry"
  statusNotes: String
  
  # Completion
  isComplete: Boolean!
  completedAt: String
  completedBy: String
  
  # Relations
  telemetryAttributes: [CustomerTelemetryAttribute!]!
  outcomes: [Outcome!]!
  releases: [Release!]!
  
  # Computed fields
  telemetryProgress: TelemetryProgress!
  
  # Metadata
  createdAt: String!
  updatedAt: String!
}

type CustomerTelemetryAttribute {
  id: ID!
  customerTask: CustomerTask!
  originalAttributeId: ID
  
  name: String!
  description: String
  dataType: TelemetryDataType!
  isRequired: Boolean!
  successCriteria: JSON!
  order: Int!
  
  # Customer-specific tracking
  isActive: Boolean!
  isMet: Boolean!
  lastCheckedAt: String
  
  # Values
  values: [CustomerTelemetryValue!]!
  latestValue: CustomerTelemetryValue
  
  # Metadata
  createdAt: String!
  updatedAt: String!
}

type CustomerTelemetryValue {
  id: ID!
  customerAttribute: CustomerTelemetryAttribute!
  
  value: JSON!
  source: String
  batchId: String
  notes: String
  
  createdAt: String!
}

type TelemetryProgress {
  totalAttributes: Int!
  requiredAttributes: Int!
  metAttributes: Int!
  metRequiredAttributes: Int!
  completionPercentage: Float!
  allRequiredMet: Boolean!
}

# Input Types
input AssignProductToCustomerInput {
  customerId: ID!
  productId: ID!
  licenseLevel: LicenseLevel!
  selectedOutcomeIds: [ID!]!
}

input UpdateCustomerProductInput {
  licenseLevel: LicenseLevel
  selectedOutcomeIds: [ID!]
}

input UpdateCustomerTaskStatusInput {
  customerTaskId: ID!
  status: CustomerTaskStatus!
  notes: String
}

input AddCustomerTelemetryValueInput {
  customerAttributeId: ID!
  value: JSON!
  source: String
  batchId: String
  notes: String
}

# Result Types
type DeleteResult {
  success: Boolean!
  message: String
}

# Extended Queries
extend type Query {
  # Customer queries (enhanced)
  customer(id: ID!): Customer
  
  # Adoption plan queries
  adoptionPlan(id: ID!): AdoptionPlan
  adoptionPlansForCustomer(customerId: ID!): [AdoptionPlan!]!
  
  # Customer task queries
  customerTask(id: ID!): CustomerTask
  customerTasksForPlan(adoptionPlanId: ID!, status: CustomerTaskStatus): [CustomerTask!]!
}

# Extended Mutations
extend type Mutation {
  # Customer product assignment
  assignProductToCustomer(input: AssignProductToCustomerInput!): CustomerProductWithPlan!
  updateCustomerProduct(id: ID!, input: UpdateCustomerProductInput!): CustomerProductWithPlan!
  removeProductFromCustomerEnhanced(id: ID!): DeleteResult!
  
  # Adoption plan management
  createAdoptionPlan(customerProductId: ID!): AdoptionPlan!
  syncAdoptionPlan(adoptionPlanId: ID!): AdoptionPlan!
  
  # Task status management
  updateCustomerTaskStatus(input: UpdateCustomerTaskStatusInput!): CustomerTask!
  bulkUpdateCustomerTaskStatus(adoptionPlanId: ID!, taskIds: [ID!]!, status: CustomerTaskStatus!, notes: String): [CustomerTask!]!
  
  # Telemetry value management
  addCustomerTelemetryValue(input: AddCustomerTelemetryValueInput!): CustomerTelemetryValue!
  bulkAddCustomerTelemetryValues(inputs: [AddCustomerTelemetryValueInput!]!): [CustomerTelemetryValue!]!
  
  # Auto-update task status based on telemetry
  evaluateTaskTelemetry(customerTaskId: ID!): CustomerTask!
  evaluateAllTasksTelemetry(adoptionPlanId: ID!): AdoptionPlan!
}
